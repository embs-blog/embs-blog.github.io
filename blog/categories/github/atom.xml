<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categoria: Github | Título do Blog]]></title>
  <link href="http://embs.blog.br/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://embs.blog.br/"/>
  <updated>2014-03-20T15:40:14-03:00</updated>
  <id>http://embs.blog.br/</id>
  <author>
    <name><![CDATA[embs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Como Utilizar Issues Do Github]]></title>
    <link href="http://embs.blog.br/blog/2013/02/20/como-utilizar-issues-do-github/"/>
    <updated>2013-02-20T19:19:40-03:00</updated>
    <id>http://embs.blog.br/blog/2013/02/20/como-utilizar-issues-do-github</id>
    <content type="html"><![CDATA[<p>Pessoal,</p>

<p>o nosso repositório no Github possui uma seção muito importante em qualquer projeto de desenvolvimento de software: a seção de issues. Issues são, basicamente, questões do projeto que podem assumir dois estados: aberta (open) ou fechada (closed).</p>

<p>No Github, a cada issue são associadas labels que indicam do que ela trata. Por exemplo: uma issue com título &ldquo;Corrigir estilo do botão de logar&rdquo; pode ser associada com as labels &ldquo;front-end&rdquo; e &ldquo;bug&rdquo; &mdash; já que, claramente, trata-se de um bug no front-end do projeto.</p>

<!-- more -->


<p>As labels são completamente customizáveis &mdash; isto é, podemos criá-las, editá-las ou removê-las, além de associar uma cor a cada uma delas. Segue uma descrição de cada uma das labels existentes atualmente em nosso repositório:</p>

<ul>
<li>Bug: bug;</li>
<li>Enhancement: melhoria. Rotula issues que se referem a funcionalidades que <em>já estão implementadas</em> mas podem ser melhoradas;</li>
<li>Front-end: issues relacionados à implementação do front-end (HTML, CSS e Javascript);</li>
<li>Back-end: issues relacionados à implementação do back-end (controladores, modelos e tudo o mais que for RubyOnRails-specific);</li>
<li>Duplicate: usada para quando, por engano, issues são criadas para questões do projeto que já possuem issue;</li>
<li>Feature: implementação de nova funcionalidade;</li>
<li>Invalid: nunca usei. Deve ser pra quando um issue é criado por engano ou pra quando um issue é criado e depois se constata que não é uma questão do projeto válida (que deve ser levada em conta);</li>
<li>Question: usada para issues referentes a dúvidas específicas sobre alguma coisa do projeto. Ex.: uma issue &ldquo;Será que não deveríamos usar o MongoDB como nosso banco de dados?&rdquo; pode ser rotulada com a label &ldquo;question&rdquo;;</li>
<li>Wontfix: rotula issues que não serão resolvidas;</li>
</ul>


<p>Além disso, issues podem ser atribuídas a um colaborador do projeto (responsável por resolvê-la, isto é, fechá-la ou tratar dos meios para que ela seja fechada, vulgo mandar alguém fazer) e podem ser associadas a um milestone do projeto. Milestones são utilizados quando há prazos estimados para lançamento de versões &mdash; algo que foge do escopo desta mensagem e que não utilizaremos ao menos por enquanto.</p>

<p>Estou criando issues à medida em que encontro possibilidades factíveis para tal. Quem quiser acompanhar e colaborar, basta fazer isso através da nossa seção de issues no Github.</p>

<p>Abraços!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Pull Request Através De Branches Distintos Num Mesmo Repositório]]></title>
    <link href="http://embs.blog.br/blog/2013/02/08/tutorial-pull-request-atraves-de-branches-distintos-num-mesmo-repositorio/"/>
    <updated>2013-02-08T19:09:45-03:00</updated>
    <id>http://embs.blog.br/blog/2013/02/08/tutorial-pull-request-atraves-de-branches-distintos-num-mesmo-repositorio</id>
    <content type="html"><![CDATA[<p>Pessoal,</p>

<p>terminei de implementar a funcionalidade que escolhi (Autenticação com Facebook) e vou aproveitar minhas modificações para dar um exemplo de como é aquele fluxo de criação de novo branch e pull request usando o git e o Github. Segui o algoritmo e, no momento, eu deveria estar no passo 6 (abra a imagem em uma nova aba ou janela para ver em seu tamanho original)
<img src="http://i.minus.com/ill0y8RRJeriz.png" alt="Inline Image" /></p>

<p>Acontece que eu esqueci de executar o passo 4 (afinal, estava com muito sono), o que não é de todo ruim por que serve para mostrar o que fazer no caso de acontecer o mesmo com algum de vocês.</p>

<!-- more -->


<p>Mas atenção: se você fez o que o passo 4 diz (criou e utilizou um novo branch para a inclusão das modificações), pode pular isso que vou fazer agora e passar direto para a etapa de criação do commit. Executando um simples
<code>bash
$ git status
</code>
é isso que obtenho como resultado:
<img src="http://i.minus.com/itqnNxt69zTSo.png" alt="Inline Image" /></p>

<p>Passando as Modificações para o Branch Correto</p>

<p>Observem que estou no branch master e tenho vários arquivos modificados e untracked. Não era bem isso que eu queria. Queria ter todos esses arquivos modificados e untracked em outro branch para que eu pudesse, então, usar &lsquo;git add&rsquo; e criar um commit com todas essas modificações. Como resolver essa bronca? Bem.. há algumas maneiras diferentes de se fazer isso e eu optei por uma que considero bastante simples: &lsquo;git stash&rsquo;.</p>

<p>Antes usar o comando stash do git, preciso adicionar tudo como se fosse criar um commit. O stash é mais ou menos um commit que não vai pra lugar nenhum. Adicionando todas as minhas modificações:
<code>bash
$ git add .
</code>
Chamando &lsquo;git status&rsquo; novamente, vejo os arquivos que foram adicionados ao index e estão prontos para entrar num novo commit:
<img src="http://i.minus.com/iBdt6ThpNFmXt.png" alt="Inline Image" /></p>

<p>O status mostra que há um arquivo no status &lsquo;deleted&rsquo;. Para efetivar essa modificação no git é necessário executar
<code>bash
$ git rm spec/controllers/games_controller_controller_spec.rb
</code>
Depois disso, executando &lsquo;git status&rsquo; novamente, vejo que todas as modificações (inclusive novos arquivos e arquivos removidos) foram inseridas ao index e estão prontas para ser commitadas (aparecem em verde). Agora, pra fazer o stash entrar em ação:
<code>bash
$ git stash
</code>
O comando dá como saída uma mensagem informando que as modificações foram salvas no stash e que o HEAD agora está no último commit. O stash funciona em regime de pilha. Se eu continuasse fazendo modificações, adicionasse com &lsquo;git add&rsquo; e chamasse &lsquo;git stash&rsquo; de novo, essas novas modificações seriam empilhadas sobre o último stash. O comando para listar tudo o que há na pilha de stash é
<code>bash
$ git stash list
</code>
Depois de salvar as modificações no stash, o &lsquo;git status&rsquo; fica limpo novamente (sem aquele monte de arquivos modificados e untrackeds resultantes da minha implementação).
<img src="http://i.minus.com/iiceUtgqKUzWx.png" alt="Inline Image" /></p>

<p>Percebam que o arquivo &lsquo;.rvmrc&rsquo; está na seção untracked (o que não acontecia antes) por que o arquivo .gitignore que informava ao git para ignorar o .rvmrc foi mandado pro stash. De qualquer maneira, não há problemas em que ele permaneça aí por que a seção untracked (como já deve ser sabido) exibe arquivos que não estão sendo versionados com o git.</p>

<p>Beleza. Agora que já tenho todas as minha modificações em um lugar que posso recuperar depois e meu branch master voltou a ser o que era antes de eu começar a implementação, meu próximo passo é criar meu novo branch e dar um checkout pra ele (isto é, informar ao git que quero trabalhar nesse branch). Para criar um novo branch a partir do branch em que estou atualmente (no caso, estou no branch master), basta executar
<code>bash
$ git branch fb-connect
</code>
em que &lsquo;fb-connect&rsquo; é o nome do meu branch (escolhido arbitrariamente por mim). Isso cria o branch mas não o seleciona. Para mudar para o branch:
<code>bash
$ git checkout fb-connect
</code>
Agora, sim, estamos trabalhando no branch recém-criado. Git oferece uma maneira de encurtar o caminho para criar um novo branch e dar checkout nele com um comando só, que é o seguinte:
<code>bash
$ git checkout -b fb-connect
</code>
O argumento &lsquo;-b&rsquo; informa que o branch para o qual se está dando checkout é um novo branch. Para confirmar que de fato estamos trabalhando num novo branch podemos rodar o popular &lsquo;git status&rsquo; ou
<code>bash
$ git branch
</code>
que lista todos os branches no repositório local ou
<code>bash
$ git branch -a
</code>
que lista todos os branches &mdash; tanto no repositório local quanto nos remotos (a stands for all).
<img src="http://i.minus.com/ibpwfGJQg0wD3N.png" alt="Inline Image" /></p>

<p>Estamos preparados para remover aquelas modificações colocadas no stash e aplicá-las no novo branch! Para fazer isso:
<code>bash
$ git stash pop
</code>
Isso aplica as mudanças, já adicionando os novos arquivos ao stage &mdash; isto é, prontos para ser commitados. Arquivos modificados e removidos vão para a seção de not staged, de acordo com a comparação com o último commit da árvore de commits do branch (que é onde o HEAD se encontra).
<img src="http://i.minus.com/ibuvZnHpXlqYc3.png" alt="Inline Image" /></p>

<p>Criando e Enviando o Novo Commit ao Repositório Remoto</p>

<p>Para adicionar tudo ao commit que iremos criar, já sabe, né? &lsquo;git add .&rsquo; e &lsquo;git rm <caminho/para/o/nome do arquivo a ser removido>&hellip;&rsquo;. Depois de fazer isso, todas as modificações aparecem em verde ao dar um novo &lsquo;git status&rsquo; &mdash; o que significa que serão adicionadas ao novo commit, que criaremos com:
<code>bash
$ git commit -m "Introduz funcionalidade de login com conta do Facebook"
</code>
Se dermos um &lsquo;git status&rsquo; novamente, veremos que nosso diretório de trabalho está limpo (nada pra commitar) e executando
<code>bash
$ git log
</code>
podemos listar todos os commits.
<img src="http://i.minus.com/i9EylLqwxG1bM.png" alt="Inline Image" /></p>

<p>Atente para o fato de que o último commit (&ldquo;Introduz funcionalidade[&hellip;]&rdquo;) só existe no branch em que estamos atualmente! Se dermos &lsquo;git checkout master&rsquo; e &lsquo;git log&rsquo; ele não ira aparecer. O commit também não existe no repositório remoto. Na verdade, o branch que criamos ainda não existe no remoto também. Para subir nosso código para o repositório remoto (hosteado pelo Github), precisamos rodar o comando
<code>bash
$ git push origin fb-connect
</code>
em que origin é o nome do remoto (você pode ver os nomes e os endereços dos remotos cadastrados no seu repositório local através de &lsquo;git remote -v&rsquo;) e fb-connect é o nome do branch para o qual o push será feito.
<img src="http://i.minus.com/ivF35JHY3ZLa4.png" alt="Inline Image" /></p>

<p>Criando o Pull Request</p>

<p>Agora o nosso novo branch (com o commit que possui as modificações) já está no repositório remoto e pode ser visualizado através da interface web do Github (<a href="https://github.com/embs/gaming/tree/fb-connect">https://github.com/embs/gaming/tree/fb-connect</a>). É justamente de lá que iremos realizar o pull request para solicitar que o código adicionado e modificado seja integrado ao branch principal (master). Isso é bem fácil de fazer (nem precisa de linha de comando &mdash; pra ser sincero, não sei como fazer por linha de comando nem se há como fazer por linha de comando): basta clicar no botão bonito (Pull Request) do Github. :)
<img src="http://i.minus.com/ipN3MizF4CLOd.png" alt="Inline Image" /></p>

<p>Depois aparece um formulário em que você pode dar mais detalhes (além do texto da mensagem do último commit) sobre o que você fez nesse novo branch. Ah! outra coisa importante nessa tela é a informação de qual pra qual branch o pull request está sendo feito. Nesse caso, estou solicitando para que o código do fb-connect vá para o master.
<img src="http://i.minus.com/ib2xwxNGb0RXhF.png" alt="Inline Image" /></p>

<p>E aí é só &ldquo;Send pull request&rdquo;.
<img src="http://i.minus.com/iA4gdblA4YL7o.png" alt="Inline Image" /></p>

<p>E correr pro abraço! Ou melhor&hellip; ir para o passo 7 do passo-a-passo. :/</p>
]]></content>
  </entry>
  
</feed>

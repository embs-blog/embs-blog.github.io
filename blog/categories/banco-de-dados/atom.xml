<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categoria: Banco De Dados | Título do Blog]]></title>
  <link href="http://embs.blog.br/blog/categories/banco-de-dados/atom.xml" rel="self"/>
  <link href="http://embs.blog.br/"/>
  <updated>2014-03-20T15:40:14-03:00</updated>
  <id>http://embs.blog.br/</id>
  <author>
    <name><![CDATA[embs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Guia Rápido Para Instalação E Configuração Do PostgreSQL]]></title>
    <link href="http://embs.blog.br/blog/2013/03/02/guia-rapido-para-instalacao-e-configuracao-do-postgresql/"/>
    <updated>2013-03-02T19:26:45-03:00</updated>
    <id>http://embs.blog.br/blog/2013/03/02/guia-rapido-para-instalacao-e-configuracao-do-postgresql</id>
    <content type="html"><![CDATA[<h3>Um Pouco de Blábláblá</h3>

<p>Ontem eu tive minha primeira experiência (pra valer) de utilização do PuppyLinux [1][2]. Quis experimentar o S.O. por que as máquinas do Centro de Informática tolhem completamente o usuário comum (leia-se aluno) quanto à instalação de ferramentas e, desenvolvendo um projeto RoR atualmente, preciso instalar várias delas.</p>

<p>A ideia inicial é, portanto, rodar um ambiente de desenvolvimento Ruby on Rails direto de um pendrive com o S.O. PuppyLinux. Nesta postagem não abordarei o processo completo de setup do ambiente (que me custou a tarde e a noite de ontem) mas apenas uma das partes &mdash; supostamente &mdash; mais laboriosas: a instalação (na mão, é claro) do PostgreSQL.</p>

<!-- more -->


<h3>1º Passo: Download</h3>

<p>A página de download do Postgres fornece binários pré-compilados para vários S.O.s. No meu caso, pra instalar no Puppy, baixei o fonte desta página. A versão que escolhi foi a 9.1.7 [3].</p>

<h3>2º Passo: Compilar e instalar</h3>

<p>Descompactação:
<code>bash
$ tar xvjf postgresql-9.1.7.tar.bz2
</code>
Mudar para o diretório novo:
<code>bash
$ cd postgresql-9.1.7/
</code>
Preparar instalação:
<code>bash
$ ./configure
</code>
e
<code>bash
$ gmake
</code>
Mudar para usuário super:
<code>bash
$ su
</code>
Instalar: asd
```bash</p>

<h1>gmake install</h1>

<p>```</p>

<h3>3º Passo: Configurar e rodar</h3>

<p>Criar o usuário (no Linux) &lsquo;postgres&rsquo;:
```bash</p>

<h1>adduser postgres</h1>

<p><code>
Criar o diretório onde ficarão os arquivos do BD:
</code>bash</p>

<h1>mkdir /usr/local/pgsql/data</h1>

<p><code>
Dar permissão ao usuário postgres:
</code>bash</p>

<h1>chown postgres /usr/local/pgsql/data</h1>

<p><code>
Mudar para usuário postgres:
</code>bash</p>

<h1>su &ndash; postgres</h1>

<p><code>
Iniciar o banco:
</code>bash</p>

<h1>/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data</h1>

<p><code>
Iniciar o processo do Postgres:
</code>bash</p>

<h1>/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data >logfile 2>&amp;1 &amp;</h1>

<p>```</p>

<h3>4º Passo: Testar a criação de um banco</h3>

<p>```bash</p>

<h1>/usr/local/pgsql/bin/createdb test</h1>

<p><code>
e, para acessar o banco:
</code>bash</p>

<h1>/usr/local/pgsql/bin/psql test</h1>

<p>```</p>

<h3>5º Post-Install: Linkar comandos e criar um outro usuário</h3>

<p>Não sei se você percebeu mas, para rodar os comandos do postgres nas linhas de comando anteriores, precisamos utilizar o caminho completo para o diretório onde o comando se encontra. Isso é um saco. Pra resolver, criei links simbólicos para todos os comandos presentes em &ldquo;/usr/local/psql/bin/psql&rdquo;. Assim:
```bash</p>

<h1>for f in $(ls -d /usr/local/pgsql/bin/*); do ln -s $f /usr/local/bin; done</h1>

<p><code>
Agora só falta uma coisa: criar um usuário do Postgres com o nome do seu usuário Linux. Saia do usuário super (com um simples 'exit') e comande:
</code>bash
$ sudo -u postgres createuser &mdash;superuser $USER
<code>
E finalmente, para configurar uma senha para seu novo usuário, acesse a ferramenta de linha de comando do Postgres:
</code>bash
$ sudo -u postgres psql
<code>
e (substitua $USER pelo nome de seu usuário Linux)
</code>bash
postgres=# \password $USER
```
Beleza. Agora você já pode acessar o Posgres com o seu usuário e, no caso de estar desenvolvendo um projeto Rails, configurar o database.yml com seus dados de usuário e senha.</p>

<h3>Referências</h3>

<ul>
<li>[1] <a href="http://puppylinux.com">http://puppylinux.com</a></li>
<li>[2] <a href="http://puppylinux.org">http://puppylinux.org</a></li>
<li>[3] <a href="http://ftp.postgresql.org/pub/source/v9.1.7/postgresql-9.1.7.tar.bz2">http://ftp.postgresql.org/pub/source/v9.1.7/postgresql-9.1.7.tar.bz2</a></li>
<li>[4] <a href="http://www.postgresql.org/docs/9.0/static/install-short.html">http://www.postgresql.org/docs/9.0/static/install-short.html</a></li>
<li>[5] <a href="http://www.commandlinefu.com/commands/view/1225/symlink-all-files-from-a-base-directory-to-a-target-directory">http://www.commandlinefu.com/commands/view/1225/symlink-all-files-from-a-base-directory-to-a-target-directory</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
